{
  "version": 3,
  "sources": ["../src/history.tsx", "../src/utils/historyUtil.ts", "../src/actions/index.tsx", "../src/actions/copy.tsx", "../src/actions/preferences.tsx", "../src/actions/save.tsx", "../src/views/answer-detail.tsx", "../src/utils/savedChatUtil.ts"],
  "sourcesContent": ["import { ActionPanel, Icon, List } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { useHistory } from \"./utils/historyUtil\";\nimport { DestructiveAction } from \"./actions\";\nimport { CopyActionSection } from \"./actions/copy\";\nimport { PreferencesActionSection } from \"./actions/preferences\";\nimport { SaveActionSection } from \"./actions/save\";\nimport { Chat } from \"./types\";\nimport { AnswerDetailView } from \"./views/answer-detail\";\nimport { useSavedChat } from \"./utils/savedChatUtil\";\n\nexport default function History() {\n  const savedChat = useSavedChat();\n  const history = useHistory();\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [selectedAnswerId, setSelectedAnswerId] = useState<string | null>(null);\n  const getActionPanel = (chat: Chat) => (\n    <ActionPanel>\n      <CopyActionSection answer={chat.answer} question={chat.question} />\n      <SaveActionSection onSaveAnswerAction={() => savedChat.add(chat)} />\n      <ActionPanel.Section title=\"Delete\">\n        <DestructiveAction\n          title=\"Remove\"\n          dialog={{\n            title: \"Are you sure you want to remove this answer from your history?\",\n          }}\n          onAction={() => history.remove(chat)}\n        />\n        <DestructiveAction\n          title=\"Clear History\"\n          dialog={{\n            title: \"Are you sure you want to clear your history?\",\n          }}\n          onAction={() => history.clear()}\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"delete\" }}\n        />\n      </ActionPanel.Section>\n      <PreferencesActionSection />\n    </ActionPanel>\n  );\n\n  const sortedHistory = history.data.sort(\n    (a, b) => new Date(b.created_at ?? 0).getTime() - new Date(a.created_at ?? 0).getTime()\n  );\n\n  const filteredHistory = sortedHistory\n    .filter((value, index, self) => index === self.findIndex((history) => history.id === value.id))\n    .filter((answer) => {\n      if (searchText === \"\") {\n        return true;\n      }\n      return (\n        answer.question.toLowerCase().includes(searchText.toLowerCase()) ||\n        answer.answer.toLowerCase().includes(searchText.toLowerCase())\n      );\n    });\n\n  return (\n    <List\n      isShowingDetail={filteredHistory.length === 0 ? false : true}\n      isLoading={history.isLoading}\n      filtering={false}\n      throttle={false}\n      selectedItemId={selectedAnswerId || undefined}\n      onSelectionChange={(id) => {\n        if (id !== selectedAnswerId) {\n          setSelectedAnswerId(id);\n        }\n      }}\n      searchBarPlaceholder=\"Search answer/question...\"\n      searchText={searchText}\n      onSearchTextChange={setSearchText}\n    >\n      {history.data.length === 0 ? (\n        <List.EmptyView\n          title=\"No history\"\n          description=\"Your recent questions will be showed up here\"\n          icon={Icon.Stars}\n        />\n      ) : (\n        <List.Section title=\"Recent\" subtitle={filteredHistory.length.toLocaleString()}>\n          {filteredHistory.map((answer) => (\n            <List.Item\n              id={answer.id}\n              key={answer.id}\n              title={answer.question}\n              accessories={[{ text: new Date(answer.created_at ?? 0).toLocaleDateString() }]}\n              detail={<AnswerDetailView chat={answer} />}\n              actions={answer && selectedAnswerId === answer.id ? getActionPanel(answer) : undefined}\n            />\n          ))}\n        </List.Section>\n      )}\n    </List>\n  );\n}\n", "import { LocalStorage, showToast, Toast } from \"@raycast/api\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Chat } from \"../types\";\n\nexport function useHistory() {\n  const [data, setData] = useState<Chat[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    (async () => {\n      const storedHistory = await LocalStorage.getItem<string>(\"history\");\n\n      if (storedHistory) {\n        setData((previous) => [...previous, ...JSON.parse(storedHistory)]);\n      }\n      setLoading(false);\n    })();\n  }, []);\n  useEffect(() => {\n    LocalStorage.setItem(\"history\", JSON.stringify(data));\n  }, [data]);\n\n  const add = useCallback(\n    async (chat: Chat) => {\n      setData([...data, chat]);\n    },\n    [setData, data]\n  );\n\n  const remove = useCallback(\n    async (answer: Chat) => {\n      const toast = await showToast({\n        title: \"Removing answer...\",\n        style: Toast.Style.Animated,\n      });\n      const newHistory: Chat[] = data.filter((item) => item.id !== answer.id);\n      setData(newHistory);\n      toast.title = \"Answer removed!\";\n      toast.style = Toast.Style.Success;\n    },\n    [setData, data]\n  );\n\n  const clear = useCallback(async () => {\n    const toast = await showToast({\n      title: \"Clearing history...\",\n      style: Toast.Style.Animated,\n    });\n    setData([]);\n    toast.title = \"History cleared!\";\n    toast.style = Toast.Style.Success;\n  }, [setData]);\n\n  return useMemo(() => ({ data, isLoading, add, remove, clear }), [data, isLoading, add, remove, clear]);\n}\n", "import { Action, Alert, confirmAlert, Icon, Image, Keyboard } from \"@raycast/api\";\n\nexport const PrimaryAction = ({ title, onAction }: { title: string; onAction: () => void }) => (\n  <Action title={title} icon={Icon.ArrowRight} onAction={onAction} />\n);\n\nexport const PinAction = ({\n  title,\n  isPinned,\n  onAction,\n}: {\n  title: string;\n  isPinned: boolean;\n  onAction: () => void;\n}) => <Action title={title} icon={isPinned ? Icon.PinDisabled : Icon.Pin} onAction={onAction} />;\n\nexport const CopyToClipboardAction = (props: Action.CopyToClipboard.Props) => (\n  <Action.CopyToClipboard icon={Icon.CopyClipboard} {...props} />\n);\n\nexport const SaveAction = ({\n  onAction,\n  title,\n  modifiers,\n}: {\n  onAction: () => void;\n  title: string;\n  modifiers: Keyboard.KeyModifier[];\n}) => <Action icon={Icon.Star} title={title} onAction={onAction} shortcut={{ modifiers, key: \"s\" }} />;\n\nexport const SaveAsSnippetAction = ({ text, name }: { text: string; name: string }) => (\n  <Action.CreateSnippet\n    icon={Icon.Snippets}\n    title=\"Save as a Snippet\"\n    snippet={{ text, name }}\n    shortcut={{ modifiers: [\"cmd\"], key: \"n\" }}\n  />\n);\n\nexport const DestructiveAction = ({\n  icon = Icon.Trash,\n  title,\n  dialog,\n  onAction,\n  shortcut = { modifiers: [\"ctrl\"], key: \"x\" },\n}: {\n  icon?: Image.ImageLike;\n  title: string;\n  dialog: { title?: string; message?: string; primaryButton?: string };\n  onAction: () => void;\n  shortcut?: Keyboard.Shortcut;\n}) => (\n  <Action\n    style={Action.Style.Destructive}\n    icon={icon}\n    title={title}\n    onAction={async () => {\n      await confirmAlert({\n        title: dialog.title ?? title,\n        message: dialog.message ?? \"This action cannot be undone\",\n        icon,\n        primaryAction: {\n          title: dialog.primaryButton ?? title,\n          style: Alert.ActionStyle.Destructive,\n          onAction,\n        },\n      });\n    }}\n    shortcut={shortcut}\n  />\n);\n", "import { ActionPanel } from \"@raycast/api\";\nimport { CopyToClipboardAction } from \"./index\";\n\nexport const CopyActionSection = ({ question, answer }: { question: string; answer: string }) => (\n  <ActionPanel.Section title=\"Copy\">\n    <CopyToClipboardAction title=\"Copy Answer\" content={answer} />\n    <CopyToClipboardAction title=\"Copy Question\" content={question} />\n  </ActionPanel.Section>\n);\n", "import { Action, ActionPanel, Icon, openExtensionPreferences } from \"@raycast/api\";\n\nexport const PreferencesActionSection = () => (\n  <ActionPanel.Section title=\"Preferences\">\n    <Action icon={Icon.Gear} title=\"Open Extension Preferences\" onAction={openExtensionPreferences} />\n  </ActionPanel.Section>\n);\n", "import { ActionPanel } from \"@raycast/api\";\nimport { SaveAction, SaveAsSnippetAction } from \"./index\";\n\nexport const SaveActionSection = ({\n  onSaveConversationAction,\n  onSaveAnswerAction,\n  snippet,\n}: {\n  onSaveConversationAction?: () => void;\n  onSaveAnswerAction: () => void;\n  snippet?: { text: string; name: string };\n}) => (\n  <ActionPanel.Section title=\"Save\">\n    {onSaveConversationAction && (\n      <SaveAction title=\"Save Conversation\" onAction={onSaveConversationAction} modifiers={[\"cmd\"]} />\n    )}\n    <SaveAction\n      title=\"Save Answer\"\n      onAction={onSaveAnswerAction}\n      modifiers={onSaveConversationAction ? [\"cmd\", \"shift\"] : [\"cmd\"]}\n    />\n    {snippet && <SaveAsSnippetAction text={snippet.text} name={snippet.name} />}\n  </ActionPanel.Section>\n);\n", "import { List } from \"@raycast/api\";\nimport { Chat } from \"../types\";\n\nexport const AnswerDetailView = (props: { chat: Chat; streamData?: Chat | undefined }) => {\n  const { chat, streamData } = props;\n\n  const isStreaming = streamData && streamData.id === chat.id;\n  const markdown = `**${chat.question}**\\n\\n${isStreaming ? streamData.answer : chat.answer}`;\n\n  return <List.Item.Detail markdown={markdown} />;\n};\n", "import { LocalStorage, showToast, Toast } from \"@raycast/api\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Chat, SavedChat } from \"../types\";\n\nexport function useSavedChat() {\n  const [data, setData] = useState<SavedChat[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    (async () => {\n      const storedSavedChats = await LocalStorage.getItem<string>(\"savedChats\");\n\n      if (storedSavedChats) {\n        setData((previous) => [...previous, ...JSON.parse(storedSavedChats)]);\n      }\n      setLoading(false);\n    })();\n  }, []);\n\n  useEffect(() => {\n    LocalStorage.setItem(\"savedChats\", JSON.stringify(data));\n  }, [data]);\n\n  const add = useCallback(\n    async (chat: Chat) => {\n      const toast = await showToast({\n        title: \"Saving your answer...\",\n        style: Toast.Style.Animated,\n      });\n      const newSavedChat: SavedChat = { ...chat, saved_at: new Date().toISOString() };\n      setData([...data, newSavedChat]);\n      toast.title = \"Answer saved!\";\n      toast.style = Toast.Style.Success;\n    },\n    [setData, data]\n  );\n\n  const remove = useCallback(\n    async (chat: Chat) => {\n      const toast = await showToast({\n        title: \"Unsaving your answer...\",\n        style: Toast.Style.Animated,\n      });\n      const newSavedChats = data.filter((savedAnswer) => savedAnswer.id !== chat.id);\n      setData(newSavedChats);\n      toast.title = \"Answer unsaved!\";\n      toast.style = Toast.Style.Success;\n    },\n    [setData, data]\n  );\n\n  const clear = useCallback(async () => {\n    const toast = await showToast({\n      title: \"Clearing your saved answers...\",\n      style: Toast.Style.Animated,\n    });\n    setData([]);\n    toast.title = \"Saved answers cleared!\";\n    toast.style = Toast.Style.Success;\n  }, [setData]);\n\n  return useMemo(() => ({ data, isLoading, add, remove, clear }), [data, isLoading, add, remove, clear]);\n}\n"],
  "mappings": "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",
  "names": ["history_exports", "__export", "History", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "useHistory", "data", "setData", "isLoading", "setLoading", "storedHistory", "previous", "add", "chat", "remove", "answer", "toast", "newHistory", "item", "clear", "import_api", "import_jsx_runtime", "CopyToClipboardAction", "props", "SaveAction", "onAction", "title", "modifiers", "SaveAsSnippetAction", "text", "name", "DestructiveAction", "icon", "dialog", "shortcut", "import_api", "import_jsx_runtime", "CopyActionSection", "question", "answer", "CopyToClipboardAction", "import_api", "import_jsx_runtime", "PreferencesActionSection", "import_api", "import_jsx_runtime", "SaveActionSection", "onSaveConversationAction", "onSaveAnswerAction", "snippet", "SaveAction", "SaveAsSnippetAction", "import_api", "import_jsx_runtime", "AnswerDetailView", "props", "chat", "streamData", "isStreaming", "markdown", "import_api", "import_react", "useSavedChat", "data", "setData", "isLoading", "setLoading", "storedSavedChats", "previous", "add", "chat", "toast", "newSavedChat", "remove", "newSavedChats", "savedAnswer", "clear", "import_jsx_runtime", "History", "savedChat", "useSavedChat", "history", "useHistory", "searchText", "setSearchText", "selectedAnswerId", "setSelectedAnswerId", "getActionPanel", "chat", "CopyActionSection", "SaveActionSection", "DestructiveAction", "PreferencesActionSection", "filteredHistory", "a", "b", "value", "index", "self", "answer", "id", "AnswerDetailView"]
}
